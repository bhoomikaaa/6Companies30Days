Question - rotten oranges

  int orangesRotting(vector<vector<int>>& grid) {
         queue<pair<int,int>> rotten; // Queue to store the co-ordinates of rotten orange
          int r= grid.size(), c= grid[0].size(),fresh=0,t=0;
        for(int i=0;i<r;i++){      // traversing the grid
            for(int j=0;j<c;j++){
                if(grid[i][j]==2) rotten.push({i,j}); // if the value of coordinate is 2 push that 
              //  coordinate into rotten queue
                else if(grid[i][j]==1) fresh++; // else increment the count of fresh
            }
        }
        while(!rotten.empty()){ // until the queue is not empty
            int num=rotten.size(); // store the size of queue, currently it has all the oranges were
          //  previously rotten in the question
            for(int i=0;i< num;i++){ // take the coordinates of front element of queue
                int x= rotten.front().first, y= rotten.front().second;
                rotten.pop(); // after that pop it out from the queue and rot its neighbours if fresh
                if(x>0 && grid[x-1][y]==1){
                    grid[x-1][y]=2; fresh--;  rotten.push({x-1,y}); // left side
                };
                 if(y>0 && grid[x][y-1]==1){
                    grid[x][y-1]=2; fresh--;  rotten.push({x,y-1}); // below
                };
                 if(x<r-1 && grid[x+1][y]==1){
                    grid[x+1][y]=2; fresh--;  rotten.push({x+1,y}); // right
                };
                 if(y<c-1 && grid[x][y+1]==1){
                    grid[x][y+1]=2; fresh--;  rotten.push({x,y+1}); // above
                };
                
                
                
            }
            if(!rotten.empty())  t++; // if we have rotten any orange from the popped orange then we must
            //have inserted it into queue so queue must not be empty
        }
        if(fresh==0) // if we have rotten all oranges
            return t;
        else return -1;
    }
    
    
    T(C)-O(N)  where n is rows into columns.
    S(C)-O(N)
