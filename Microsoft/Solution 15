Alien Dictionary

 void topological(vector<int> adj[],string &s, vector<int> &vis,int node) {
    vis[node] = 1; // mark the starting node as visited
    for(auto it:adj[node]){ // traversing all the adjacent nodes
        if(!vis[it]) {
            topological(adj,s,vis,it);
        }
    }
    s.push_back(node+'a');
}
    
    
    
    string findOrder(string dict[], int N, int K) {
         vector<int> adj[K]; // creating a grapgh of k nodes
       vector<int> ans;
       for(int i = 0;i < N-1;i++){
           int mins = min(dict[i].length(),dict[i+1].length());
           for(int j = 0;j < mins;j++){
               if(dict[i][j] != dict[i+1][j]){ // if the ch in string i is not equal to that
               // consecutive ch in i+1 that means it is greater than the i one
                   adj[dict[i][j]-'a'].push_back(dict[i+1][j]-'a');
                   break;
               }
           }
       }
       string s = "";
       vector<int> vis(K,0); // visited array of k nodes
       for(int i = 0;i < K;i++){
           if(!vis[i]){ // perfrom topological sort
               topological(adj,s,vis,i);
           }
       }
       reverse(s.begin(),s.end()); // reverse the string
       return s;
    }
