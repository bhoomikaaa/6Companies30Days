solutions to problems of goldman sachs

//Question 1. print all anagrams together
//solution
vector<vector<string> > Anagrams(vector<string>& string_list) {
        vector<vector<string>> ans; // Creating a vector of vector of strings as a result
        unordered_map<string,vector<string> >umap; // taking sorted string as a key and all the original anagrams of it as values
        for( int i=0;i<string_list.size(); i++){
            
        
        string s =string_list[i]; 
        sort(s.begin(),s.end());  // sort string s
        umap[s].push_back(string_list[i]); // we have passed the sorted string as values and comparing it with sorted value of anagrams and if they are equal then the original
	//anagram would become the value for that key
        
    }
    for(auto itr=umap.begin(); itr!=umap.end();itr++)
    ans.push_back(itr->second);
    return ans;
    }
    /* 
    T(c)- O(N*|S|*log|S|) where N is the total number of strings and |S| denotes the size of string so |S|log|S| time would be taken for sorting them.
    S(c)-O(N*|S|) sinc we are storing n strings of size |S| in hashmap.
    */
    
    
   // Question 2 Overlapping Rectangles
    
    int doOverlap(int L1[], int R1[], int L2[], int R2[]) {
     // to check if the rectangles are actually a line
     if(L1[0]==L2[0] || R1[0] ==R2[0]|| L1[1]==L2[1] || R1[1]==R2[1])
     return false;
    
    // if one rectangle is left of left side of other
    if(R1[0]<L2[0] || R2[0]<L1[0])
    return false;
     // if one rectangle is above the top of other
     if(R1[1]>L2[1] || R2[1]>L1[1])
     return false;
     return true;
}
//T(c)-O(1)
//S(C)- O(1)


//Question 3 count subarrays having product less than k 
     int countSubArrayProductLessThanK(const vector<int>& a, int n, long long k) {
     long long int start=0,end=0,count=0,prod=1;
       while(end<n){
           prod*=a[end];
           while(start<n and prod>=k){
               prod=prod/a[start]; // drop that element
               start++; // slide the window
           }
           if(prod<k)
           count+=end-start+1;
          // +1 because we are also considering individual elements as subarrays
           end++; // increment the size of the window
       }
       return count;
    }
   // T(C)-O(N) since we are traversing the whole array once
   // S(C)-O(1)



// Question 4 Run length encoding
string encode(string src)
{     
  //Your code here 
   string ans = "";
  char prev = src[0];
  int count = 1;
  for(int i=1;i<src.length();i++){
      if(src[i] == prev){
          count++;
      }
      else{
          ans.push_back(prev);
          ans.append(to_string(count));
          count = 1;
          prev = src[i];
      }
  }
  ans.push_back(prev);
  ans.append(to_string(count));
  return ans;
}  
//T(C)-O(N)
//S(C)-O(1)

// Question 5 Program to find Nth ugly number.

	ull getNthUglyNo(int n) {
	    vector<ull> vec(1,1); // we have added 1 as an ugly number
	    for(int x=0,y=0,z=0; vec.size()!=n;){ // performing the operation since size of vector becomes n
	        ull val= min(min(vec[x]*2,vec[y]*3),vec[z]*5); // multiply 2 3 and 5  with the least value in the vector and select min among those multiples
	        vec.push_back(val); 
	        if(vec.back()==vec[x]*2)
	        x++;
	         if(vec.back()==vec[y]*3)
	        y++;
	         if(vec.back()==vec[z]*5)
	        z++;
	        
	    }
	    return vec.back(); // return the last value i.e nth value of vector
	 
	}
      //  T(C)-O(N)
       // S(C)-O(N)
       
       
       // Question 6 Greatest Common Divisor of Strings
       (using recursion)
        string gcdOfStrings(string str1, string str2) {
        if (str1 + str2 != str2 + str1){   // to have common divsior , their concatenation should equal from both ways
             return "";
                }
             if(str1 == str2){
            return str1;
               }
             if(str1.length() > str2.length()){
             return gcdOfStrings(str1.substr(str2.length()), str2);
     }
     if(str2.length() > str1.length()){
        return gcdOfStrings(str2.substr(str1.length()), str1);
        }
     return 0; 
            }
	    // T(C)-O(t+S) length of both strings
	    //S(C)-O(t+s)

// Question 7 Distributing M items in a circle of size N starting from K-th position
int Solution::solve(int M, int N, int K) {
    int n= (M+K-1)%N;
    if (n==0){
    return N;
    }
    
    return n;

}

//Question 8 Total decoding messages
	int CountWays(string str){
		    // Code here
		    
		int n=str.length();
    int dp[n+1];
    int mod = 1e9 + 7;
    dp[0]=1;
    dp[1]=1;
   
    if(n==1 && str[0]!='0')  //if first element is 0 string cant be decoded
    return 1;
    if(str[0]=='0')// if first element is other than one string can be decoded in one way
    return 0;
    
    for(int i=2;i<=n;i++)
    {
        dp[i]=0;
        
        if(str[i-1]>'0')  // considering element at i-1 as a single element
        dp[i] = dp[i-1];
        
        if(str[i-2]=='1' || str[i-2]=='2' && str[i-1]<'7')  // to consider last two elements as double digit number it should be between 10 ans 26
        dp[i] = (dp[i]+dp[i-2])%mod;
    }
    return dp[n];
		}
		// T(C)-O(N)
		S(C)-O(N)



// Question 9 Number following a pattern 
 string printMinNumberForPattern(string S){
        // code here 
        // we are using stack bcz it works on LIFO principle and we want to print the output 
       // in reverse order for decreasing sequence.
        stack<int> st;
        string ans ="";
        int num=1;
        for(int i=0;i<S.size();i++){
            char c=S[i];
            if(c=='D'){ // if character is d push it into stack and incr num
                st.push(num++);
                
            }
            else { // if we encounter i it is a breakpoint so print all previous stack values
                st.push(num++);
                while(!st.empty()){
                    char c1= '0'+st.top();
                    ans.push_back(c1);
                    st.pop();
                    
                }
            }
        }
        st.push(num++);
        while(!st.empty()){
            
            char c1= '0'+st.top(); // explicit conversion to char type
            ans.push_back(c1);
            st.pop();
                    
                }
        return ans;
    }
    
    // Find max 10 numbers in a list having 10 M entries
    #include<bits/stdc++.h>
using namespace std;
vector<int> LargestTen( vector<int> &arr){

 priority_queue<int, vector<int> , greater<int>> q; // Creating a priority queue with greater than comparator
 for(int i=0;i<arr.size();i++){
 if(q.size()==10){ // when the size becomes 10
 if(arr[i]>q.top()){
 q.pop();             // pop out the root if we are inserting a greater element
 q.push(arr[i]); // and push that element
 }

 }
 else{
 q.push(arr[i]);
 }
 }
 vector<int> res;
 for(int i=0;i<10;i++){
 int temp=q.top();   // top will have the largest element
 res.push_back(temp);
 q.pop();  // pop the top and next largest would become the top
 }
 return res;


 }




int main(){
 long long int n;
 cin>>n;
 vector<int> arr;
 for(int i=0;i<n;i++){
 int temp;
 cin>>temp;
 arr.push_back(temp);



 }
 vector<int> result;
 result = LargestTen(arr);
 cout<<endl<<"largest 10"<<endl;
 for(int i=9;i>=0;i--){
 cout<<result[i]<<endl;
 }

}
//T(C)-O(NlogK)
// S(C)-O(K)
    
    
    // Question 11 Find missing and repeating 
    pair<int,int> findboth(int *arr, int n){ // helper function find two numbers
    int repeating=0;
    int missing=0;
    for(int i=0;i<n;i++){
        int index=abs(arr[i]-1);
        if(arr[index]>0){         // if the element is positive make it negative
        arr[index]=-1*arr[index];
        }
        else{
            repeating=abs(arr[i]); // if it is already negative that means we are encountering it the second time so its repeating
        }
    }
    for(int i=0;i<n;i++){
        if(arr[i]>0){  // if after the whole process an element is still positive that means we didnt reach to its index which means its missing
            missing=i+1;
            
        }
    }
    return { repeating,missing};
}
    int *findTwoElement(int *arr, int n) {
        int* res= new int[2]; // dynamic array
        pair<int,int> ans= findboth(arr,n);
        res[0] =ans.first;
        res[1]=ans.second;
        return res;
        
    }
    T(C)-O(N)
    S(C)-O(1)


// Question 12 Find number of squares in an N*N chessborad

int calcSquaresCount(int n){
   int squareCount = ( (n * (n+1) * (2*n + 1))/6 ); // since this is the formula for sq(1)+sq(2)+sq(3)+.........+sq(n)
   return squareCount;
}

// Question 13 Decode String
// Using Recursion
class Solution{
    string decodedString( string& s, int& i){
        string result;
        while(i<s.length() && s[i]!=']'){ // Continue the process until we encounter ]
            if(isdigit(s[i])){ // if the current element is a digit
        int k=0;
      while(i<s.length() && isdigit(s[i])) // Until the element is a digit
                k=k*10+s[i++]-'0'; // eg-345= 0*10+3= 3, 3*10+4=34. 34*10+5=345
                i++; // skipping [ bracket 
                string r= decodedString(s,i); // recursive call to function 
                while(k-- > 0) 
                result+=r;  // add r to result string k number of times
                i++; // skipping closing bracket
            }else
            result+=s[i++]; // if current element is non digit
        }
        return result;
    }
    T//(C)-O(S) becuase we are traversing a string once
    //S(C)-O(S) because of recursive stack
    
    
    
public:
    string decodedString(string s){
        // code here
        int i=0;
        return decodedString(s,i);
    }
};


// Question 14 Minimum size subarray sum
(using two pointer approach)
     int minlen=nums.size()+1;
        int sum=0;
        int left=0;
        for(int right=0;right<nums.size();right++){
            sum=sum+nums[right];
            while(sum>=target && left<=right){
                minlen=min(minlen,right-left+1);
                sum-=nums[left++];
            }
        }
        if (minlen==nums.size()+1 )
            return 0;
        else
            return minlen;
    }
    // T(C)-O(N)
    // S(C)-O(N)


// Question 15 Array pair sum divisibility problem
 bool canPair(vector<int> nums, int k) {
        // Code here.
        unordered_map<int,int> m; // declaring a map  that stores remainders and their frequencies
        for(int i=0;i<nums.size();i++){
          int rem =nums[i]%k;
             if(rem<0) // case when the remainder is negative add k to it
              rem+=k;
              m[rem]++; stores all the remainders
        }
        if(m[0]%2!=0)  // 0 should be present even times
        return false;
        for(int i=1;i<k;i++){ // traversing the map
        if(m[i]!=m[k-i])  // frequency of remainder of nums[i] should be equal to k-frequency of remainder of nums[i] so that they can make a pair for eg if k=3 the frequency of 1
	//should be equal to frequency of 2
        return false; }
        
    
    return true;
    }
    T(C)-O(N)
    S(C)-O(N)
 
