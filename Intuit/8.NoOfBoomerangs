https://leetcode.com/problems/number-of-boomerangs/

int dist (vector<int>& a, vector<int>& b) //aux function 
    {
        return (a[0]-b[0])*(a[0]-b[0])+(a[1]-b[1])*(a[1]-b[1]);
    }
    int numberOfBoomerangs(vector<vector<int>>& points) {
        /*Main idea is: if a point (name it middle ) has 2 other point with same distance then it can make two boomerangs since we can exchange the two boundary pts other than middle similarly for n pts with same distance, we can make 2 nC2 = n(n-1)*/

        int n = points.size(),ans=0;
        unordered_map<int,int> s;
        for (int i=0;i<n;i++)
        {
            for (int j=0;j<n;j++)
                s[dist(points[i],points[j])]++; //get cnt of all the distances from this node
            for (auto x:s)
                ans+=(x.second)*(x.second-1); // count total boomerangs we can made from the node
            s.clear(); // clear map for next node 
        }
        return ans;
   
    }
};
