https://leetcode.com/problems/as-far-from-land-as-possible/

int maxDistance(vector<vector<int>>& grid) {
          int n= grid.size();
        vector<pair<int,int>> dir={{-1,0},{0,-1},{0,1},{1,0}};
        queue<pair<int,int>> q;
        for(int i=0;i<n;++i){
            for(int j=0;j<n;++j){
                if(grid[i][j]==1) q.push({i,j});
            }
        }
        if(q.size()==0|| q.size()==n*n)return -1;
        while(!q.empty()){
            pair<int,int> cur= q.front();
            q.pop();
         
            for(int i=0;i<4;++i){
                 int x=cur.first+ dir[i].first;
                  int y=cur.second +dir[i].second;  
                if(isValid(x,y,n) && grid[x][y]==0){
                    q.push({x,y});
                    grid[x][y]=grid[cur.first][cur.second]+1;
                }
            }
            
        }int res=INT_MIN;
         for(int i=0;i<n;++i){
            for(int j=0;j<n;++j){
                if(grid[i][j]>res) res=grid[i][j];
            }
        }
        return res-1;
        
    }
    bool isValid(int i,int j,int n){
        if(i<0 || i>=n || j<0 || j>=n) return false;
        else return true;
    }
    
