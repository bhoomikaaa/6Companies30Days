https://leetcode.com/problems/course-schedule-ii/

// using bfs(kahn algo)
class Solution {
    bool kahnsAlgo(vector<vector<int>>&adj,int n,vector<int>&indegree, vector<int>&ans){
        
        // take a queue and push all vertices with indegree 0
        queue<int>q;
        for(int i=0;i<n;i++)
            if(indegree[i]==0)
                q.push(i);
            // process all nodes with indegree 0 or remove from the queue and decrement the indegree of adjacent nodes
            int count=0;
            while(!q.empty()){
                int curr= q.front();
                q.pop();
                for(auto a: adj[curr]){
                    indegree[a]-=1;
                    if(indegree[a]==0)
                        q.push(a);
                }
                ans.push_back(curr); // push current node in the ans that is our final topo sort
                count+=1; // keeps count of no of processed vertices
            }
            if(count!=n) // no of nodes processed != no of nodes in the grapgh
                return false;
            return true;
        
    }
    
    
    
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        int n= prerequisites.size();
        vector<vector<int>>adj(numCourses);
        vector<int>indegree(numCourses,0); // store indegree of each node
        
        // make adjacency list
        for(int i=0;i<n;i++){
            adj[prerequisites[i][1]].push_back(prerequisites[i][0]);
            indegree[prerequisites[i][0]]+=1; // setting the indegree for every node
        }
        // Kahn's algo
        vector<int>ans;
        if(kahnsAlgo(adj,numCourses,indegree,ans))
            return ans;
        vector<int>empty;
        return empty;
        
    }
};
