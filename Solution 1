Question Max profit in K transactions

 int maxProfit(int K, int N, int A[]) {
    
        //Case-1: n<=1 OR k==0
        if(K==0 || N<=1)
            return 0;
        
        //Case-2: k>=n
        if(2*K>N) // if there are infinite number of transactions
        {
            int res = 0;
            for(int i=1;i<N;++i)
                if(A[i]>A[i-1])  // just consider all the increasing curves
                    res+=(A[i]-A[i-1]);
            return res;
        }
        
        //Case-3: 1<=k<n
        int dp[2*K+1]; // No of by and sell would equal to 2 into transactions
        // For eg for 2 transactions there will 2 buy and 2 sell
        dp[0]=-A[0]; // for the first element we can only buy or skip sp we would have negative profit
        for(int i=1;i<=2*K;++i)
        {
            // pre filling the dp array
            if(i%2==0)  //Buy 
                dp[i]=INT_MIN; // min profit can upto integer negative
            else    //SELL
                dp[i]=0; // min profit can be 0
        }
        
        for(int i=0;i<N;++i) // traversing the given array
        for(int j=0;j<=2*K;++j)// traversing the dp array
        {
            if(j==0)  // at first dp element max profit can be current dp element or negative if we buy it
                dp[j]=max(dp[j],-A[i]);
            else if(j%2==0)         //BUY  STATE
                dp[j]=max(dp[j],dp[j-1]-A[i]); // SUBTRACTING BECAUSE WE ARE INVESTING WHILE BUYING
            else                    //SELL
                dp[j]=max(dp[j],dp[j-1]+A[i]); // ADDING BECAUSE WE WILL GAIN A MIN PROFIT
        }
        return dp[2*K-1];
    }
    
    //T(C)-O(NK)  since we are performing k transactions for n elements
   // S(C)-O(K)  a dp array can have max 2k+1 elements
